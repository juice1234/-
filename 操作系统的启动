
电脑启动时会根据CS和IP上的值进行计算的出地址，根据地址PC=CS《4+IP（实模式）在内存上找到第一条指令。也就是0XFFFF0。
RAM是随机存储器，断电就丢失信息
ROM是制度存储器，断电不丢失信息
计算机有一块BIOS，是一块ROM，0XFFFF0对应的地址在这块ROM中
开始执行0XFFFF0中的程序：检测硬件是否正常，把磁盘中启动扇区的代码（bootsect .s）放到内存0X7C00中，并设置CS=0X7C0，IP=0X0000，计算机根据PC的地址进行取指执行。




https://blog.csdn.net/weixin_42240667/article/details/104503184


加下来把硬盘中的system.s移动到内存中，但是system.s很大，需要先获得扇区的参数

上面只时设置了中断和源地址和目标地址，下面开始移动



#all是根节点，依赖于Image


其中bootsect.s和setup.s程序需要使用as86软件来编译，使用的是as86的汇编语言格式，而head.s需要用GNU as来编译，使用的是AT&T格式的汇编语言。
怎么保证system的大小固定呢？用0去补充，可以中间补充0，也可以后面补充0
接上面的bootsect.s执行完成后，接下来执行setup.s，所以在bootsect.s的最后一句指令就是jmpi 0,SETUPSEG,即PC=0X90200
setup.s做两件事：1，获得一些硬件参数 
                              2，让系统有16位模式（实模式）转为32位模式（保护模                                        式）、

接下来启动保护模式电路

上面就是把CR0最有以为置1，启动保护电路，最有一条指令jmpi 0，8(CS=8, EIP=0)
https://blog.csdn.net/billpig/article/details/5833980

前面的setup.s还做了一一个步骤没说出来是把system.s从0x10000-0x90000移动到0x00000-0x80000
setup.s执行完后开始执行system.s（32位保护模式）
在head.s中：
1，设置中断表，因为system.s的移动使得0x00000地址处的BIOS中断被覆盖了。所以接下来只能用操作系统来响应中断了。
2，设置GDT表，setup.s中的GDT只是为了JMPI 0,8临时建立的。
3，设置页表，GDT[CS]+EIP不只能直接输出到地址总线上，需要也查一下页表得到真正的物理地址才输出到地址总线上
页表等的创建后面再讲
head.s的最后是跳到C语言的main函数中，循环执行不出来、
main（）：初始化数据结构


上面一段代码很重要，需要回头再来看
init（）会启动一个shell，也就是命令窗口cmd 










